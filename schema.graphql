# Note: `project.id` is string concatenated from multiple properties. `projectId` represents an integer id of the project.

type ProtocolLog @entity {
  id: ID!
  v1: ProtocolV1Log @derivedFrom(field: "log")
  v2: ProtocolV2Log @derivedFrom(field: "log")
  v3: ProtocolV3Log @derivedFrom(field: "log")

  projectsCount: Int!
  volumePaid: BigInt!
  volumeRedeemed: BigInt!
  paymentsCount: Int!
  redeemCount: Int!
  erc20Count: Int!
  trendingLastUpdatedTimestamp: Int!
  oldestTrendingPayEvent: PayEvent
}

type _Schema_
  @fulltext(
    name: "projectSearch"
    language: en
    algorithm: rank
    include: [{ entity: "Project", fields: [{ name: "handle" }] }]
  )

#############################################################################
############################### vx.x entities ###############################
#############################################################################

# Note: Events used for v1, v2 and v3 contracts include `pv` (projects version) and `terminal` (terminal address) properties which allows querying events for specific contract versions.

# v1.0, v1.1, v2, v3
type ProjectCreateEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  pv: String!
  timestamp: Int!
  txHash: Bytes!
  caller: Bytes!
}

# v1.0, v1.1, v2, v3
type Project @entity {
  id: ID!
  projectId: Int!
  pv: String!
  handle: String
  metadataUri: String

  # Only v1.x
  terminal: Bytes

  # Only v2 + v3
  metadataDomain: BigInt

  owner: Bytes!
  creator: Bytes!
  createdAt: Int!
  totalPaid: BigInt!
  totalRedeemed: BigInt!
  currentBalance: BigInt!
  trendingScore: BigInt!
  trendingVolume: BigInt!
  trendingPaymentsCount: Int!
  createdWithinTrendingWindow: Boolean!

  # Derived fields
  participants: [Participant!]! @derivedFrom(field: "project")
  payEvents: [PayEvent!]! @derivedFrom(field: "project")
  addToBalanceEvents: [AddToBalanceEvent!]! @derivedFrom(field: "project")
  mintTokensEvents: [MintTokensEvent!]! @derivedFrom(field: "project")
  tapEvents: [TapEvent!]! @derivedFrom(field: "project")
  redeemEvents: [RedeemEvent!]! @derivedFrom(field: "project")
  printReservesEvents: [PrintReservesEvent!]! @derivedFrom(field: "project")
  distributeToPayoutModEvents: [DistributeToPayoutModEvent!]!
    @derivedFrom(field: "project")
  distributeToTicketModEvents: [DistributeToTicketModEvent!]!
    @derivedFrom(field: "project")
  deployedERC20s: [DeployedERC20Event!]! @derivedFrom(field: "project")
  distributePayoutsEvents: [DistributePayoutsEvent!]! @derivedFrom(field: "project")
  distributeToPayoutSplitEvents: [DistributeToPayoutSplitEvent!]! @derivedFrom(field: "project")
  distributeReservedTokensEvents: [DistributeReservedTokensEvent!]! @derivedFrom(field: "project")
  distributeToReservedTokenSplitEvents: [DistributeToReservedTokenSplitEvent!]! @derivedFrom(field: "project")
  deployedERC20Events: [DeployedERC20Event!]! @derivedFrom(field: "project")
  useAllowanceEvents: [UseAllowanceEvent!]! @derivedFrom(field: "project")
  projectEvents: [ProjectEvent!]! @derivedFrom(field: "project")
  ethErc20ProjectPayers: [ETHERC20ProjectPayer!]! @derivedFrom(field: "project")
  deployVeNftEvents: [DeployVeNftEvent!]! @derivedFrom(field: "project")
  veNftContract: VeNftContract @derivedFrom(field: "project")
  jb721DelegateTokens: [JB721DelegateToken!]! @derivedFrom(field: "project")
  configureEvents: [ConfigureEvent!]! @derivedFrom(field: "project")
  initEvents: [InitEvent!]! @derivedFrom(field: "project")
  v1ConfigureEvents: [V1ConfigureEvent!]! @derivedFrom(field: "project")
  v1InitEvents: [V1InitEvent!]! @derivedFrom(field: "project")
}

# v1.0, v1.1, v2, v3
type Participant @entity {
  id: ID!
  project: Project!
  projectId: Int!
  pv: String!
  wallet: Bytes!
  totalPaid: BigInt!
  lastPaidTimestamp: Int!
  balance: BigInt!
  stakedBalance: BigInt!
  unstakedBalance: BigInt!
  jb721DelegateTokens: [JB721DelegateToken!]! @derivedFrom(field: "owner")
}

# v1.0, v1.1, v2, v3
type ProjectEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  pv: String!
  terminal: Bytes # Only terminal events
  timestamp: Int!

  # Conditional properties. Only one of these properties should exist. This is a helper entity that makes it possible to query all "project events" for a project.
  payEvent: PayEvent
  addToBalanceEvent: AddToBalanceEvent
  mintTokensEvent: MintTokensEvent 
  tapEvent: TapEvent 
  redeemEvent: RedeemEvent 
  printReservesEvent: PrintReservesEvent 
  distributeToPayoutModEvent: DistributeToPayoutModEvent 
  distributeToTicketModEvent: DistributeToTicketModEvent 
  deployedERC20Event: DeployedERC20Event
  projectCreateEvent: ProjectCreateEvent
  distributePayoutsEvent: DistributePayoutsEvent
  distributeReservedTokensEvent: DistributeReservedTokensEvent
  distributeToReservedTokenSplitEvent: DistributeToReservedTokenSplitEvent
  distributeToPayoutSplitEvent: DistributeToPayoutSplitEvent
  useAllowanceEvent: UseAllowanceEvent
  deployETHERC20ProjectPayerEvent: DeployETHERC20ProjectPayerEvent
  deployVeNftEvent: DeployVeNftEvent
  configureEvent: ConfigureEvent
  initEvent: InitEvent
  v1ConfigureEvent: V1ConfigureEvent
  v1InitEvent: V1InitEvent
}

# v1.0, v1.1, v2, v3
type PayEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  pv: String!
  terminal: Bytes!
  timestamp: Int!
  txHash: Bytes!

  caller: Bytes!
  beneficiary: Bytes!
  amount: BigInt!
  note: String!
  feeFromV2Project: Int # Indicates payment is a fee from project with this ID
}

# v1.0, v1.1, v2, v3
type AddToBalanceEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  pv: String!
  terminal: Bytes!
  timestamp: Int!
  txHash: Bytes!

  caller: Bytes!
  amount: BigInt!
  note: String
}

# v1.0, v1.1, v2, v3
type MintTokensEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  pv: String!
  timestamp: Int!
  txHash: Bytes!

  beneficiary: Bytes!
  amount: BigInt!
  memo: String!
  caller: Bytes!
}

# v1.0, v1.1, v2, v3
type RedeemEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  pv: String!
  terminal: Bytes!
  timestamp: Int!
  txHash: Bytes!

  holder: Bytes!
  beneficiary: Bytes!
  amount: BigInt!
  returnAmount: BigInt!
  caller: Bytes!
}

# v1.0, v1.1, v2, v3
type DeployedERC20Event @entity {
  id: ID!
  project: Project!
  projectId: Int!
  pv: String!
  timestamp: Int!
  txHash: Bytes!

  symbol: String!
  address: Bytes # will be empty for v1.x events
}

#############################################################################
############################### v1.x entities ###############################
#############################################################################
# v1.0, v1.1
type ProtocolV1Log @entity {
  id: ID!
  log: ProtocolLog!
  projectsCount: Int!
  volumePaid: BigInt!
  volumeRedeemed: BigInt!
  paymentsCount: Int!
  redeemCount: Int!
  erc20Count: Int!
}

# v1.0, v1.1
type PrintReservesEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!

  fundingCycleId: BigInt!
  beneficiary: Bytes!
  count: BigInt!
  beneficiaryTicketAmount: BigInt!
  caller: Bytes!
  distributions: [DistributeToTicketModEvent!]!
    @derivedFrom(field: "printReservesEvent")
}

# v1.0, v1.1
type DistributeToPayoutModEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!

  fundingCycleId: BigInt!
  modProjectId: Int!
  modAllocator: Bytes!
  modBeneficiary: Bytes!
  modPreferUnstaked: Boolean!
  modCut: BigInt!
  caller: Bytes!
  tapEvent: TapEvent!
}

# v1.0, v1.1
type TapEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!

  fundingCycleId: BigInt!
  beneficiary: Bytes!
  amount: BigInt!
  currency: BigInt!
  netTransferAmount: BigInt!
  beneficiaryTransferAmount: BigInt!
  govFeeAmount: BigInt!
  caller: Bytes!
  distributions: [DistributeToPayoutModEvent!]! @derivedFrom(field: "tapEvent")
}

# v1.0, v1.1
type DistributeToTicketModEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!

  fundingCycleId: BigInt!
  modBeneficiary: Bytes!
  modPreferUnstaked: Boolean!
  modCut: BigInt!
  caller: Bytes!
  printReservesEvent: PrintReservesEvent!
}

# v1, v1.1
type V1ConfigureEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!

  caller: Bytes!
  target: BigInt!
  currency: Int!
  duration: Int!
  cycleLimit: Int!
  discountRate: Int!
  ballot: Bytes!

  fundingCycleId: Int!
  reconfigured: Int!
  metadata: BigInt!

  version: Int!
  reservedRate: Int!
  bondingCurveRate: Int!
  reconfigurationBondingCurveRate: Int!

  payIsPaused: Boolean
  ticketPrintingIsAllowed: Boolean
  extension: Bytes
}

# v1, v1.1
type V1InitEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!

  caller: Bytes!
  fundingCycleId: Int!
  previous: Int!
  start: Int!
  weight: BigInt!
  number: Int!
}

#############################################################################
################################ v2 entities ################################
#############################################################################
# v2
type ProtocolV2Log @entity {
  id: ID!
  log: ProtocolLog!
  projectsCount: Int!
  volumePaid: BigInt!
  volumeRedeemed: BigInt!
  paymentsCount: Int!
  redeemCount: Int!
  erc20Count: Int!
}

# v2
type DistributePayoutsEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!
  terminal: Bytes!

  fundingCycleConfiguration: BigInt!
  fundingCycleNumber: Int!
  beneficiary: Bytes!
  amount: BigInt!
  distributedAmount: BigInt!
  fee: BigInt!
  beneficiaryDistributionAmount: BigInt!
  memo: String!
  caller: Bytes!
  splitDistributions: [DistributeToPayoutSplitEvent!]!
    @derivedFrom(field: "distributePayoutsEvent")
}

# v2
type DistributeToPayoutSplitEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!
  terminal: Bytes!

  domain: BigInt!
  group: BigInt!
  amount: BigInt!
  caller: Bytes!
  distributePayoutsEvent: DistributePayoutsEvent!

  # Split struct properties below
  preferClaimed: Boolean!
  preferAddToBalance: Boolean!
  percent: Int!
  splitProjectId: Int!
  beneficiary: Bytes!
  lockedUntil: Int!
  allocator: Bytes!
}

# v2
type DistributeReservedTokensEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!

  fundingCycleNumber: Int!
  beneficiary: Bytes!
  tokenCount: BigInt!
  beneficiaryTokenCount: BigInt!
  memo: String!
  caller: Bytes!
  splitDistributions: [DistributeToReservedTokenSplitEvent!]!
    @derivedFrom(field: "distributeReservedTokensEvent")
}

# v2
type DistributeToReservedTokenSplitEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!

  tokenCount: BigInt!
  caller: Bytes!
  distributeReservedTokensEvent: DistributeReservedTokensEvent!

  # Split struct properties below
  preferClaimed: Boolean!
  percent: Int!
  splitProjectId: Int!
  beneficiary: Bytes!
  lockedUntil: Int!
  allocator: Bytes!
}

# v2
type UseAllowanceEvent @entity{
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!

  fundingCycleConfiguration: BigInt!
  fundingCycleNumber: Int!
  beneficiary: Bytes!
  amount: BigInt!
  distributedAmount: BigInt!
  netDistributedamount: BigInt!
  memo: String!
  caller: Bytes!
}

# v2
type DeployETHERC20ProjectPayerEvent @entity{
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!

  address: Bytes!
  beneficiary: Bytes!
  preferClaimedTokens: Boolean!
  preferAddToBalance: Boolean!
  directory: Bytes!
  owner: Bytes!
  memo: String
  metadata: Bytes
  caller: Bytes!
}

#v2
type DeployVeNftEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!

  veNftContract: VeNftContract!
}

# v2
type ETHERC20ProjectPayer @entity{
  id: ID!
  project: Project!
  projectId: Int!
  address: Bytes!
  beneficiary: Bytes!
  preferClaimedTokens: Boolean!
  preferAddToBalance: Boolean!
  directory: Bytes!
  owner: Bytes!
  memo: String
  metadata: Bytes
}

#v2
type VeNftToken @entity {
  id: ID!
  tokenId: Int!
  tokenUri: String!
  createdAt: Int!
  redeemedAt: Int
  unlockedAt: Int
  owner: Bytes!
  participant: Participant!
  lockAmount: BigInt!
  lockEnd: Int!
  lockDuration: Int!
  lockUseJbToken: Boolean!
  lockAllowPublicExtension: Boolean!
  contract: VeNftContract!
  contractAddress: Bytes!
}

#v2
type VeNftContract @entity {
  id: ID!
  address: Bytes!
  symbol: String!
  uriResolver: Bytes!
  project: Project!
  projectId: Int!
  tokens: [VeNftToken!]! @derivedFrom(field: "contract")
}

# v2, v3
type ConfigureEvent @entity {
  id: ID!
  projectId: Int!
  project: Project!
  timestamp: Int!
  txHash: Bytes!
  caller: Bytes!

  duration: Int!
  weight: BigInt!
  discountRate: BigInt!
  ballot: Bytes!

  mustStartAtOrAfter: Int!
  configuration: Int!
  metadata: BigInt!

  setTerminalsAllowed: Boolean!
  setControllerAllowed: Boolean!
  transfersPaused: Boolean!

  reservedRate: Int!
  redemptionRate: Int!
  ballotRedemptionRate: Int!
  payPaused: Boolean!
  distributionsPaused: Boolean!
  redeemPaused: Boolean!
  burnPaused: Boolean!
  mintingAllowed: Boolean!
  terminalMigrationAllowed: Boolean!
  controllerMigrationAllowed: Boolean!
  shouldHoldFees: Boolean!
  preferClaimedTokenOverride: Boolean!
  useTotalOverflowForRedemptions: Boolean!
  useDataSourceForPay: Boolean!
  useDataSourceForRedeem: Boolean!

  dataSource: Bytes!
  metametadata: Int!
}

# v2, v3
type InitEvent @entity {
  id: ID!
  projectId: Int!
  project: Project!
  timestamp: Int!
  txHash: Bytes!
  caller: Bytes!

  configuration: Int!
  basedOn: Int!
}

#############################################################################
################################ v3 entities ################################
#############################################################################
type ProtocolV3Log @entity {
  id: ID!
  log: ProtocolLog!
  projectsCount: Int!
  volumePaid: BigInt!
  volumeRedeemed: BigInt!
  paymentsCount: Int!
  redeemCount: Int!
  erc20Count: Int!
}

type JB721DelegateToken @entity {
  id: ID!
  address: Bytes!
  tokenId: BigInt!
  project: Project!
  projectId: Int!
  name: String!
  symbol: String!

  # dynamic fields
  owner: Participant!
  tokenUri: String!

  # optional: only on tiered tokens
  floorPrice: BigInt
  lockedUntil: BigInt
}

#############################################################################
############################## shared entities ##############################
#############################################################################
type ENSNode @entity {
  id: ID!
  projectId: Int
}
